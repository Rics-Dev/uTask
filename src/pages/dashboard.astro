---
import { actions } from "astro:actions";
import { db, Task, User, Project, OrganizationMember, eq } from "astro:db";

const user = Astro.locals.user;

// Get the current user's organization first
const currentOrg = await db
  .select()
  .from(OrganizationMember)
  .where(eq(OrganizationMember.userId, Number(user?.userId)))
  .get();

// Initialize empty arrays in case no organization is found
let users: any[] = [];
let projects: any[] = [];
let tasks: any[] = [];

if (currentOrg) {
  users = await db
    .select()
    .from(OrganizationMember)
    .innerJoin(User, eq(OrganizationMember.userId, User.id))
    .where(eq(OrganizationMember.orgId, currentOrg.orgId))
    .all();

  // Get projects from the same organization
  projects = await db
    .select()
    .from(Project)
    .where(eq(Project.orgId, currentOrg.orgId))
    .all();

  // Get tasks from projects in the same organization
  tasks = await db
    .select()
    .from(Task)
    .innerJoin(Project, eq(Task.projectId, Project.id))
    .where(eq(Project.orgId, currentOrg.orgId))
    .all();
}

import Layout from "../layouts/dashboardLayout.astro";
import { Bell, Search, Menu } from "lucide-astro";

import DashHeader from "../components/dashboard/DashHeader.astro";
import CurrentTasks from "../components/dashboard/CurrentTasks.tsx";
import WaitingTasks from "../components/dashboard/WaitingTasks.tsx";
import FinishedTasks from "../components/dashboard/FinishedTasks.tsx";
import ActiveUsers from "../components/dashboard/ActiveUsers.tsx";
import TaskGridS from "../components/dashboard/TaskGridS.tsx";
import ProjectGrid from "../components/dashboard/ProjectGrid.tsx";
import TaskFilters from "../components/dashboard/TaskFilters.tsx";
import NewTaskButton from "../components/dashboard/NewTaskButton.tsx";
import NewProjectButton from "../components/dashboard/NewProjectButton.tsx";
import NewTaskModalS from "../components/dashboard/NewTaskModalS.tsx";
import NewProjectModal from "../components/dashboard/NewProjectModal.tsx";
import Toast from "../components/Toast.astro";

const result = Astro.getActionResult(actions.logout); // Get action result
if (result && !result.error) {
  return Astro.redirect(`/`);
}
---

<Layout>
  <div class="min-h-screen bg-gray-50">
    <Toast />

    {/* Header */}
    <DashHeader />

    {/* Main Content */}
    <main class="max-w-full mx-auto px-4 py-6">
      {/* Stats Overview - Now in a scrollable container on mobile */}
      <div class="overflow-x-auto pb-4 mb-6">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4 min-w-[640px]">
          <CurrentTasks client:load />
          <WaitingTasks client:load />
          <FinishedTasks client:load />
          <ActiveUsers users={users} client:load />
        </div>
      </div>

      {/* Quick Actions - Responsive layout */}
      <div
        class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-6"
      >
        <div class="flex flex-wrap gap-3">
          <NewTaskButton projects={projects.length} client:load />
          <NewProjectButton client:load />
        </div>

        <div class="flex items-center gap-3 w-full sm:w-auto">
          <div class="relative flex-1 sm:flex-none">
            <input
              type="search"
              placeholder="Rechercher..."
              class="w-full sm:w-auto pl-10 pr-4 py-2 border rounded-lg"
            />
            <Search class="w-4 h-4 text-gray-400 absolute left-3 top-3" />
          </div>

          <button class="relative">
            <Bell class="w-6 h-6 text-gray-600" />
          </button>
        </div>
      </div>

      {/* Main Grid Layout - Responsive */}
      <div class="grid grid-cols-1 lg:grid-cols-12 gap-6">
        {/* Filters - Collapsible on mobile */}
        <div class="lg:col-span-3">
          <div class="bg-white p-4 rounded-lg shadow mb-6 lg:mb-0">
            <button
              class="lg:hidden w-full flex items-center justify-between p-2 mb-4 border rounded"
              id="filterToggle"
            >
              <span class="font-medium">Filters</span>
              <Menu class="w-5 h-5" />
            </button>
            <div class="hidden lg:block" id="filterContent">
              <TaskFilters client:load />
            </div>
          </div>
        </div>

        {/* Tasks Section */}
        <div class="lg:col-span-5">
          <TaskGridS client:load tasks={tasks} />
        </div>

        {/* Projects Section */}
        <div class="lg:col-span-4">
          <ProjectGrid projects={projects} client:load />
        </div>
      </div>

      {/* Modals */}
      <NewTaskModalS user={user} users={users} client:idle />
      <NewProjectModal user={user} users={users} client:idle />
    </main>
  </div>
</Layout>

<script>
  // Toggle filters on mobile
  const filterToggle = document.getElementById("filterToggle");
  const filterContent = document.getElementById("filterContent");

  filterToggle?.addEventListener("click", () => {
    filterContent?.classList.toggle("hidden");
  });
</script>
