---
import { actions } from "astro:actions";
import { db, Task, User, Project, OrganizationMember, eq, and } from "astro:db";
const user = Astro.locals.user;

// Fetching data
const users = await db.select().from(User);
const projects = await db.select().from(Project);
const tasks = await db.select().from(Task);

// Get the current user's organization
const currentOrg = await db
  .select()
  .from(OrganizationMember)
  .where(eq(OrganizationMember.userId, Number(user?.userId)))
  .get();

let activeUsers: any[] = [];
if (currentOrg) {
  activeUsers = await db
    .select()
    .from(OrganizationMember)
    .innerJoin(User, eq(OrganizationMember.userId, User.id))
    .where(
      and(
        eq(OrganizationMember.orgId, currentOrg.orgId),
        eq(User.isActive, true),
      ),
    )
    .all();
}

import Layout from "../layouts/dashboardLayout.astro";
import { Filter, Calendar, Bell, Search, Plus } from "lucide-astro";

import DashHeader from "../components/dashboard/DashHeader.astro";
import CurrentTasks from "../components/dashboard/CurrentTasks.tsx";
import WaitingTasks from "../components/dashboard/WaitingTasks.tsx";
import FinishedTasks from "../components/dashboard/FinishedTasks.tsx";
import ActiveUsers from "../components/dashboard/ActiveUsers.tsx";
import TaskGridS from "../components/dashboard/TaskGridS.tsx";
import GenericTaskGrid from "../components/dashboard/GenericTaskGrid.astro";
import ProjectGrid from "../components/dashboard/ProjectGrid.tsx";
import GenericProjectGrid from "../components/dashboard/GenericProjectGrid.astro";
import TaskFilters from "../components/dashboard/TaskFilters.astro";
import NewTaskButton from "../components/dashboard/NewTaskButton.tsx";
import NewProjectButton from "../components/dashboard/NewProjectButton.tsx";
import NewTaskModal from "../components/dashboard/NewTaskModal.astro";
import NewTaskModalS from "../components/dashboard/NewTaskModalS.tsx";
import NewProjectModal from "../components/dashboard/NewProjectModal.tsx";
import Toast from "../components/Toast.astro";

const result = Astro.getActionResult(actions.logout); // Get action result
if (result && !result.error) {
  return Astro.redirect(`/`);
}
---

<Layout>
  <div class="min-h-screen bg-gray-50">
    <Toast />

    {/* Header */}
    <DashHeader />
    {/* Main Content */}
    <main class="max-w-full mx-auto px-4 sm:px-6 lg:px-12 py-8">
      <!-- <Counter client:load /> -->
      {/* Stats Overview */}
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <CurrentTasks client:load />

        <WaitingTasks client:load />

        <FinishedTasks client:load />

        <ActiveUsers users={activeUsers} client:load />
      </div>

      <!-- Nouvelle section: Actions rapides -->
      <div class="flex justify-between items-center mb-6">
        <div class="flex space-x-4">
          <NewTaskButton projects={projects.length} client:load />
          <NewProjectButton client:load />
        </div>

        <div class="flex items-center space-x-4">
          <div class="relative">
            <input
              type="search"
              placeholder="Rechercher..."
              class="pl-10 pr-4 py-2 border rounded-lg"
            />
            <Search class="w-4 h-4 text-gray-400 absolute left-3 top-3" />
          </div>

          <button class="relative">
            <Bell class="w-6 h-6 text-gray-600" />
            <span
              class="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-4 h-4 flex items-center justify-center"
            >
              3
            </span>
          </button>
        </div>
      </div>

      <div class="grid grid-cols-12 gap-8">
        <!-- Colonne de gauche: Filtres + Calendrier -->
        <div class="col-span-3 space-y-6">
          <TaskFilters />
          <!-- <MiniCalendar client:load /> -->
          <!-- <NotificationCenter client:load /> -->
        </div>

        <!-- Colonne centrale: TÃ¢ches -->
        <div class="col-span-5">
          <TaskGridS client:load tasks={tasks} />
          <!-- <TaskGrid -->
          <!--   server:defer -->
          <!--   showFilters={true} -->
          <!--   showSort={true} -->
          <!--   showSearch={true} -->
          <!--   view="detailed" -->
          <!-- > -->
          <!--   <GenericTaskGrid slot="fallback" /> -->
          <!-- </TaskGrid> -->
        </div>

        <!-- Colonne droite: Projets -->
        <div class="col-span-4">
          <ProjectGrid projects={projects} client:load />
          <!-- <ProjectGrid -->
          <!--   server:defer -->
          <!--   showProgress={true} -->
          <!--   showMembers={true} -->
          <!--   showDeadlines={true} -->
          <!-- > -->
          <!--   <GenericProjectGrid slot="fallback" /> -->
          <!-- </ProjectGrid> -->
        </div>
      </div>
      <!-- Ajout des modales -->
      <NewTaskModalS
        user={user}
        users={users}
        projects={projects}
        client:idle
      />
      <NewProjectModal user={user} users={users} client:idle />
    </main>
  </div>

  <script>
    document.addEventListener("astro:page-load", () => {
      const newTask = document.querySelector("#newTaskBtn");
      const newProject = document.querySelector("#newProjectBtn");
      newTask?.addEventListener("click", () => openModal("newTaskModal"));
      newProject?.addEventListener("click", () => openModal("newProjectModal"));
      // Open the modal
      function openModal(modalId: string) {
        const modal = document.getElementById(modalId);
        if (modal) {
          modal.classList.remove("modal-hidden");
          modal.classList.add("modal-visible");
        }
      }
    });
  </script>
</Layout>
