---
import { actions, isInputError } from "astro:actions";

const result = Astro.getActionResult(actions.signup);
const inputErrors = isInputError(result?.error) ? result.error.fields : {};
import { ChevronLeft } from "lucide-astro";
import DotSpinner from "./spinners/DotSpinner.astro";
---

<div class="w-full max-w-md">
  <div class="mb-8">
    <a
      data-astro-reload
      href="/"
      class="flex items-center text-blue-600 hover:text-blue-700 mb-6"
    >
      <ChevronLeft class="w-5 h-5 mr-1" />
      Retour
    </a>
    <h1
      class="text-4xl font-extrabold text-gray-900 mb-2 bg-gradient-to-r from-gray-900 to-blue-800 bg-clip-text text-transparent"
    >
      Créer un compte
    </h1>
    <p class="text-lg text-gray-600">
      Commencez à optimiser votre productivité aujourd'hui
    </p>
  </div>

  <div class="bg-white/90 backdrop-blur-lg rounded-2xl p-8 shadow-xl">
    <form
      method="POST"
      action={actions.signup}
      enctype="application/x-www-form-urlencoded"
      class="space-y-6"
      id="signupForm"
    >
      <div>
        <label
          for="fullName"
          class="block text-sm font-medium text-gray-700 mb-1"
        >
          Nom complet
        </label>
        <input
          type="text"
          id="fullName"
          name="fullName"
          transition:persist
          class:list={[
            "w-full px-4 py-3 rounded-lg border focus:ring-2 focus:ring-blue-500 focus:border-blue-500",
            inputErrors.fullName ? "border-red-300" : "border-gray-300",
          ]}
          required
        />
        {
          inputErrors.fullName && (
            <p class="mt-1 text-sm text-red-600">
              {inputErrors.fullName.join(", ")}
            </p>
          )
        }
      </div>

      <div>
        <label for="email" class="block text-sm font-medium text-gray-700 mb-1">
          Email professionnel
        </label>
        <input
          type="email"
          id="email"
          name="email"
          transition:persist
          class:list={[
            "w-full px-4 py-3 rounded-lg border focus:ring-2 focus:ring-blue-500 focus:border-blue-500",
            inputErrors.email ? "border-red-300" : "border-gray-300",
          ]}
          required
        />
        {
          inputErrors.email && (
            <p class="mt-1 text-sm text-red-600">
              {inputErrors.email.join(", ")}
            </p>
          )
        }
      </div>

      <div>
        <label
          for="companyName"
          class="block text-sm font-medium text-gray-700 mb-1"
        >
          Nom de l'entreprise
        </label>
        <input
          type="text"
          id="companyName"
          name="companyName"
          transition:persist
          class:list={[
            "w-full px-4 py-3 rounded-lg border focus:ring-2 focus:ring-blue-500 focus:border-blue-500",
            inputErrors.companyName ? "border-red-300" : "border-gray-300",
          ]}
          required
        />
        {
          inputErrors.companyName && (
            <p class="mt-1 text-sm text-red-600">
              {inputErrors.companyName.join(", ")}
            </p>
          )
        }
      </div>

      <div>
        <label
          for="password"
          class="block text-sm font-medium text-gray-700 mb-1"
        >
          Mot de passe
        </label>
        <input
          type="password"
          id="password"
          name="password"
          transition:persist
          class:list={[
            "w-full px-4 py-3 rounded-lg border focus:ring-2 focus:ring-blue-500 focus:border-blue-500",
            inputErrors.password ? "border-red-300" : "border-gray-300",
          ]}
          required
        />
        {
          inputErrors.password && (
            <p class="mt-1 text-sm text-red-600">
              {inputErrors.password.join(", ")}
            </p>
          )
        }
      </div>

      <div>
        <label
          for="confirmPassword"
          class="block text-sm font-medium text-gray-700 mb-1"
        >
          Confirmer le mot de passe
        </label>
        <input
          type="password"
          id="confirmPassword"
          name="confirmPassword"
          transition:persist
          class:list={[
            "w-full px-4 py-3 rounded-lg border focus:ring-2 focus:ring-blue-500 focus:border-blue-500",
            inputErrors.confirmPassword ? "border-red-300" : "border-gray-300",
          ]}
          required
        />
        {
          inputErrors.confirmPassword && (
            <p class="mt-1 text-sm text-red-600">
              {inputErrors.confirmPassword.join(", ")}
            </p>
          )
        }
      </div>

      <button
        transition:animate="fade"
        type="submit"
        class="w-full px-6 py-4 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 relative flex items-center justify-center min-h-[56px]"
        id="submitButton"
      >
        <span id="buttonText">Créer mon compte</span>
        <DotSpinner />
      </button>
    </form>

    <p class="mt-6 text-center text-gray-600">
      Vous avez déjà un compte?{" "}
      <a
        href="/login"
        data-astro-reload
        class="text-blue-600 hover:text-blue-700 font-medium"
      >
        Se connecter
      </a>
    </p>
  </div>
</div>

<script>
  function setupFormHandlers() {
    const form = document.getElementById(
      "signupForm",
    ) as HTMLFormElement | null;
    const submitButton = document.getElementById(
      "submitButton",
    ) as HTMLFormElement | null;
    const buttonText = document.getElementById(
      "buttonText",
    ) as HTMLFormElement | null;
    const loadingSpinner = document.getElementById(
      "loadingSpinner",
    ) as HTMLFormElement | null;

    function showLoading() {
      if (buttonText && loadingSpinner && submitButton) {
        buttonText.classList.add("fade-exit");
        setTimeout(() => {
          buttonText.classList.add("hidden");
          loadingSpinner.classList.remove("hidden");
          loadingSpinner.classList.add("fade-enter");
          submitButton.disabled = true;
        }, 200);
      }
    }

    function hideLoading() {
      if (buttonText && loadingSpinner && submitButton) {
        loadingSpinner.classList.add("fade-exit");
        setTimeout(() => {
          loadingSpinner.classList.add("hidden");
          loadingSpinner.classList.remove("fade-enter");
          buttonText.classList.remove("hidden");
          buttonText.classList.remove("fade-exit");
          buttonText.classList.add("fade-enter");
          submitButton.disabled = false;
        }, 200);
      }
    }

    if (form) {
      form.addEventListener("submit", showLoading);
    }

    // Reset state on page load/reload
    hideLoading();

    // Handle Astro view transitions
    document.addEventListener("astro:before-preparation", showLoading);
    document.addEventListener("astro:after-preparation", hideLoading);
  }

  // Run setup on initial load
  setupFormHandlers();

  // Re-run setup after view transitions
  document.addEventListener("astro:after-swap", setupFormHandlers);
</script>
