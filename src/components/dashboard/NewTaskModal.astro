---
import { actions } from "astro:actions";

const result = Astro.getActionResult(actions.addTask); // Get action result
const errorMessage = result?.error?.message || null; // Default null
import { db, User, Project } from "astro:db";
import FadingSpinner from "../spinners/FadingSpinner.astro";
const users = await db.select().from(User);
const projects = await db.select().from(Project);
---

<div
  id="newTaskModal"
  class="fixed inset-0 bg-gray-900 bg-opacity-70 overflow-y-auto h-full w-full opacity-0 pointer-events-none transition-all duration-300 ease-in-out"
>
  <div
    class="relative top-10 mx-auto p-6 border w-[32rem] shadow-xl rounded-xl bg-white transform scale-95 opacity-0 transition-all duration-300 ease-in-out"
  >
    <div class="mt-2">
      <h3 class="text-xl font-semibold text-gray-900 mb-6">Nouvelle tâche</h3>
      <form
        method="POST"
        action={actions.addTask}
        id="addTaskForm"
        class="space-y-5"
      >
        {
          errorMessage && (
            <div class="p-4 mb-4 text-sm text-red-700 bg-red-100 rounded-lg">
              {errorMessage}
            </div>
          )
        }

        <!-- Existing fields -->
        <div class="space-y-2">
          <label class="block text-sm font-medium text-gray-700">Titre</label>
          <input
            transition:persist
            type="text"
            name="title"
            required
            class="mt-1 block w-full px-4 py-3 rounded-lg border border-gray-300 shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors text-sm"
            placeholder="Entrez le titre de la tâche..."
          />
        </div>

        <div class="space-y-2">
          <label class="block text-sm font-medium text-gray-700"
            >Description</label
          >
          <textarea
            transition:persist
            name="description"
            rows="4"
            class="mt-1 block w-full px-4 py-3 rounded-lg border border-gray-300 shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors text-sm resize-none"
            placeholder="Décrivez la tâche en détail..."></textarea>
        </div>

        <div class="grid grid-cols-2 gap-6">
          <div class="space-y-2">
            <label class="block text-sm font-medium text-gray-700"
              >Priorité</label
            >
            <select
              transition:persist
              name="priority"
              class="block w-full px-4 py-3 rounded-lg border border-gray-300 shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors text-sm bg-white"
            >
              <option value="low">Basse</option>
              <option value="medium" selected>Moyenne</option>
              <option value="high">Haute</option>
            </select>
          </div>

          <div class="space-y-2">
            <label class="block text-sm font-medium text-gray-700">Statut</label
            >
            <select
              transition:persist
              name="status"
              class="mt-1 block w-full px-4 py-3 rounded-lg border border-gray-300 shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors text-sm bg-white"
            >
              <option value="not_started">Non commencée</option>
              <option value="in_progress">En cours</option>
              <option value="waiting">En attente</option>
              <option value="completed">Terminée</option>
            </select>
          </div>
        </div>

        <!-- Time Estimation Fields -->
        <div class="grid grid-cols-2 gap-6">
          <div class="space-y-2">
            <label class="block text-sm font-medium text-gray-700"
              >Heures estimées</label
            >
            <input
              transition:persist
              type="number"
              name="estimatedHours"
              min="0"
              step="0.5"
              class="mt-1 block w-full px-4 py-3 rounded-lg border border-gray-300 shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors text-sm"
              placeholder="0"
            />
          </div>
          <div class="space-y-2">
            <label class="block text-sm font-medium text-gray-700"
              >Heures réelles</label
            >
            <input
              transition:persist
              type="number"
              name="actualHours"
              min="0"
              step="0.5"
              class="mt-1 block w-full px-4 py-3 rounded-lg border border-gray-300 shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors text-sm"
              placeholder="0"
            />
          </div>
        </div>

        <!-- Labels Field -->
        <div class="space-y-2">
          <label class="block text-sm font-medium text-gray-700"
            >Étiquettes</label
          >
          <input
            transition:persist
            type="text"
            name="labels"
            class="mt-1 block w-full px-4 py-3 rounded-lg border border-gray-300 shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors text-sm"
            placeholder="Séparez les étiquettes par des virgules..."
          />
        </div>

        <!-- Progress Field -->
        <div class="space-y-2">
          <label class="block text-sm font-medium text-gray-700"
            >Progression (%)</label
          >
          <input
            transition:persist
            type="range"
            value="0"
            name="progress"
            min="0"
            max="100"
            step="5"
            class="mt-1 block w-full"
          />
          <div class="text-sm text-gray-500 text-right progress-value">0%</div>
        </div>

        <!-- Recurring Task Fields -->
        <div class="space-y-4">
          <div class="flex items-center space-x-2">
            <input
              transition:persist
              type="checkbox"
              name="isRecurring"
              id="isRecurring"
              class="rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50"
            />
            <label for="isRecurring" class="text-sm font-medium text-gray-700">
              Tâche récurrente
            </label>
          </div>

          <div class="recurringOptions hidden space-y-2">
            <label class="block text-sm font-medium text-gray-700"
              >Pattern de récurrence</label
            >
            <select
              transition:persist
              name="recurringPattern"
              class="mt-1 block w-full px-4 py-3 rounded-lg border border-gray-300 shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors text-sm bg-white"
            >
              <option value="daily">Quotidien</option>
              <option value="weekly">Hebdomadaire</option>
              <option value="monthly">Mensuel</option>
              <option value="yearly">Annuel</option>
            </select>
          </div>
        </div>

        <!-- Existing Date and Assignment Fields -->
        <div class="space-y-2">
          <label class="block text-sm font-medium text-gray-700"
            >Date d'échéance</label
          >
          <input
            transition:persist
            type="date"
            name="dueDate"
            class="mt-1 block w-full px-4 py-3 rounded-lg border border-gray-300 shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors text-sm"
          />
        </div>

        <div class="space-y-2">
          <label class="block text-sm font-medium text-gray-700"
            >Assigné à</label
          >
          <select
            transition:persist
            name="assignedTo"
            class="mt-1 block w-full px-4 py-3 rounded-lg border border-gray-300 shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors text-sm bg-white"
          >
            {
              users.map((user) => (
                <option value={user.id}>{user.fullName}</option>
              ))
            }
          </select>
        </div>
        <!-- Add after the Assigned To field -->
        <div class="space-y-2">
          <label class="block text-sm font-medium text-gray-700">Projet</label>
          <select
            transition:persist
            name="projectId"
            required
            class="mt-1 block w-full px-4 py-3 rounded-lg border border-gray-300 shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors text-sm bg-white"
          >
            {
              projects.map((project) => (
                <option value={project.id}>{project.name}</option>
              ))
            }
          </select>
        </div>

        <div
          class="flex justify-end space-x-4 pt-4 mt-6 border-t border-gray-100"
        >
          <button
            type="button"
            id="closeModalBtn"
            class="px-6 py-2.5 text-sm font-medium text-gray-600 hover:text-gray-800 transition-colors rounded-lg hover:bg-gray-100"
          >
            Annuler
          </button>
          <button
            id="submitButton"
            type="submit"
            class="relative min-w-[120px] px-6 py-2.5 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 transition-colors focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            <span id="buttonText">Créer la tache</span>
            <FadingSpinner color="#ffffff" />
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<style>
  /* Existing styles */
  #newTaskModal.modal-visible {
    opacity: 1;
    pointer-events: auto;
  }

  #newTaskModal.modal-visible > div {
    opacity: 1;
    transform: scale(1);
  }

  #newTaskModal.modal-hidden {
    opacity: 0;
    pointer-events: none;
  }

  #newTaskModal.modal-hidden > div {
    opacity: 0;
    transform: scale(0.95);
  }

  input[type="date"] {
    appearance: none;
    -webkit-appearance: none;
    position: relative;
  }

  input[type="date"]::-webkit-calendar-picker-indicator {
    background: transparent;
    bottom: 0;
    color: transparent;
    cursor: pointer;
    height: auto;
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
    width: auto;
  }

  /* Progress bar styling */
  input[type="range"] {
    @apply h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer;
  }

  input[type="range"]::-webkit-slider-thumb {
    @apply w-4 h-4 bg-blue-600 rounded-full appearance-none cursor-pointer;
  }

  .recurringOptions.hidden {
    display: none;
  }
</style>

<script>
  import { navigate } from "astro:transitions/client";
  import { addNanoTask } from "../../stores/taskStore.ts";
  function showToast(message: string) {
    const toast = document.getElementById("toast");
    const toastMessage = document.getElementById("toastMessage");
    if (toast && toastMessage) {
      toastMessage.textContent = message;
      toast.classList.remove("translate-x-full");
      toast.classList.remove("right-0");
      toast.classList.add("right-6");

      setTimeout(() => {
        toast.classList.add("translate-x-full");
        toast.classList.remove("right-6");
        toast.classList.add("right-0");
      }, 3000);
    }
  }

  document.addEventListener("astro:page-load", () => {
    const form = document.getElementById("addTaskForm") as HTMLFormElement;
    if (form) {
      form.addEventListener("submit", async (e) => {
        e.preventDefault();

        showLoading();
        try {
          const formData = new FormData(form as HTMLFormElement);
          const response = await fetch(form.action, {
            method: "POST",
            body: formData,
          });

          if (response.ok) {
            closeModal("newTaskModal");
            form.reset();
            hideLoading();
            showToast("Tâche ajoutée avec succès!");
            navigate("/dashboard");
          }
        } catch (error) {
          console.error("Form submission error:", error);
        }
      });
    }

    const submitButton = document.getElementById(
      "submitButton",
    ) as HTMLFormElement | null;
    const buttonText = document.getElementById(
      "buttonText",
    ) as HTMLFormElement | null;
    const loadingSpinner = document.getElementById(
      "loadingSpinner",
    ) as HTMLFormElement | null;
    function showLoading() {
      if (buttonText && loadingSpinner && submitButton) {
        buttonText.classList.add("fade-exit");
        setTimeout(() => {
          buttonText.classList.add("hidden");
          loadingSpinner.classList.remove("hidden");
          loadingSpinner.classList.add("fade-enter");
          submitButton.disabled = true;
        }, 200);
      }
    }

    function hideLoading() {
      if (buttonText && loadingSpinner && submitButton) {
        loadingSpinner.classList.add("fade-exit");
        setTimeout(() => {
          loadingSpinner.classList.add("hidden");
          loadingSpinner.classList.remove("fade-enter");
          buttonText.classList.remove("hidden");
          buttonText.classList.remove("fade-exit");
          buttonText.classList.add("fade-enter");
          submitButton.disabled = false;
        }, 200);
      }
    }

    // Existing modal logic
    const closeModalBtn = document.querySelector("#closeModalBtn");
    if (!closeModalBtn) return;

    closeModalBtn.addEventListener("click", () => {
      closeModal("newTaskModal");
    });

    document.querySelector("#newTaskModal")?.addEventListener("click", (e) => {
      if (e.target === e.currentTarget) {
        closeModal("newTaskModal");
      }
    });

    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape") {
        closeModal("newTaskModal");
      }
    });

    function closeModal(modalId: string) {
      const modal = document.getElementById(modalId);
      const form = document.getElementById("addTaskForm") as HTMLFormElement;
      if (modal && form) {
        modal.classList.add("modal-hidden");
        modal.classList.remove("modal-visible");
        form.reset();
      }
    }

    // New form functionality
    // Progress bar value display
    const progressInput = document.querySelector('input[type="range"]');
    const progressValue = document.querySelector(".progress-value");
    if (progressInput && progressValue) {
      progressInput.addEventListener("input", (e) => {
        progressValue.textContent = `${(e.target as HTMLInputElement).value}%`;
      });
    }

    // Recurring task options toggle
    const isRecurringCheckbox = document.querySelector("#isRecurring");
    const recurringOptions = document.querySelector(".recurringOptions");
    if (isRecurringCheckbox && recurringOptions) {
      isRecurringCheckbox.addEventListener("change", (e) => {
        if ((e.target as HTMLInputElement).checked) {
          recurringOptions.classList.remove("hidden");
        } else {
          recurringOptions.classList.add("hidden");
        }
      });
    }
  });
</script>
